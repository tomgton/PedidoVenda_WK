unit DAO_Pedidos;

interface

uses FireDAC.Comp.Client, DAO_ItemsPedido, System.SysUtils;

type TPedidos = class

private
    FvalorTotal: Currency;
    FdataEmissao: TDateTime;
    FcodigoCliente: integer;
    FnumeroPedido: integer;
    FQry : TFDMemTable;
    cItemsPedido : TItemsPedido;

public

  property numeroPedido: integer  read FnumeroPedido write FnumeroPedido;
  property dataEmissao: TDateTime  read FdataEmissao write FdataEmissao;
  property codigoCliente: integer  read FcodigoCliente write FcodigoCliente;
  property valorTotal: Currency  read FvalorTotal write FvalorTotal;
  property Qry: TFDMemTable  read FQry write FQry;

  procedure criaPedido;
  procedure listarPedido;
  function retornaCodPedido: integer;


end;


implementation

uses dmPrincipal;


{ TPedido }

procedure TPedidos.criaPedido;
var QryPedido, QryItemPedido : TFDQuery;
begin

  cItemsPedido := TItemsPedido.Create;
  QryPedido := TFDQuery.Create(nil);

  dmConexoes.conexao.StartTransaction;

  try

    try
      QryPedido.Connection := dmConexoes.Conexao;

      QryPedido.close;
      QryPedido.SQL.Add('insert into pedidos(data_emissao, codigo_cliente, valor_total)');
      QryPedido.SQL.Add('values(:data, :codigocliente, :valortotal)');

      QryPedido.ParamByName('data').AsDate             := FdataEmissao;
      QryPedido.ParamByName('codigocliente').AsInteger := FcodigoCliente;
      QryPedido.ParamByName('valortotal').AsCurrency   := FvalorTotal;

      QryPedido.ExecSQL;

      QryPedido.close;
      QryPedido.SQL.clear;
      QryPedido.SQL.Add('select max(numero_pedido) as numero_pedido from pedidos');
      QryPedido.open;

      cItemsPedido.numeroPedido := QryPedido.FieldByname('numero_pedido').AsInteger;
      cItemsPedido.Qry          := FQry;

      cItemsPedido.criaItemsPedido;

      FnumeroPedido := QryPedido.FieldByname('numero_pedido').AsInteger;

      dmConexoes.conexao.Commit;

    except on E:Exception do
       begin
         dmConexoes.conexao.rollback;
       end;
    end;


  finally
    QryPedido.Free;
    cItemsPedido.Free;
  end;



end;

procedure TPedidos.listarPedido;
var QryPedido : TFDQuery;
begin

  QryPedido    := TFDQuery.Create(nil);
  cItemsPedido := TItemsPedido.Create;

  try
    QryPedido.Connection := dmConexoes.Conexao;

    QryPedido.close;
    QryPedido.SQL.Add('select numero_pedido, data_emissao, codigo_cliente, valor_total from pedidos where numero_pedido = :numero_pedido');
    QryPedido.ParamByName('numero_pedido').AsInteger := FnumeroPedido;
    QryPedido.open;

    FnumeroPedido  := QryPedido.FieldByname('numero_pedido').AsInteger;
    FdataEmissao   := QryPedido.FieldByname('data_emissao').AsDateTime;
    FcodigoCliente := QryPedido.FieldByname('codigo_cliente').AsInteger;
    FvalorTotal    := QryPedido.FieldByname('valor_total').AsCurrency;

    cItemsPedido.numeroPedido := QryPedido.FieldByname('numero_pedido').AsInteger;

    cItemsPedido.listarItemsPedido;

    FQry := cItemsPedido.Qry;

  finally
    QryPedido.free;
  end;
end;

function TPedidos.retornaCodPedido : integer;
var QryPedido : TFDQuery;
begin

  QryPedido := TFDQuery.Create(nil);

  try
    QryPedido.Connection := dmConexoes.Conexao;

    QryPedido.close;
    QryPedido.SQL.Add('select max(codigo_pedido) as codigo_pedido from pedido from pedido');
    QryPedido.open;

    Result := QryPedido.FieldByname('codigo_pedido').AsInteger;

  finally
    QryPedido.free;
  end;


end;

end.
